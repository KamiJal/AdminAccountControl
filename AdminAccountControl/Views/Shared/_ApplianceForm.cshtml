@model AdminAccountControl.Models.ApplianceViewModel


@using (Ajax.BeginForm("Save", "Home", new AjaxOptions
{
    HttpMethod = "POST",
    UpdateTargetId = "renderApplianceList",
    OnFailure = "onFailure",
    OnSuccess = "toggleModal"
}))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreatedDate, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.CreatedDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreatedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.DescriptionEnabled)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        @if (Model.IsInStockEnabled)
        {
            var isInStock = false;
            if (Model?.IsInStock.HasValue ?? false)
            {
                isInStock = Model.IsInStock.Value;
            }

            <div class="form-group">
                @Html.LabelFor(model => model.IsInStock, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.CheckBox("IsInStock", isInStock, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.IsInStock, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        @if (Model.AttachmentEnabled)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Attachment, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Attachment, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Attachment, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        <br />
        <hr />

        <div class="form-group">
            <div class="col-md-offset-7 col-md-10">
                <input type="submit" class="btn btn-primary" value="Сохранить" />
                <input type="button" class="btn btn-danger" value="Отменить" data-dismiss="modal" />
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
